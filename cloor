		t_sphere *param = (t_sphere *)obj->obj_param;
		obj = obj->next;
		t_sphere *param = (t_sphere *)obj->obj_param;
		obj = obj->next;
//	t_2vecf text_coord = obj->get_text_coordinate(inter_point, normal_inter, obj);
	//	return(obj->text.color_1);
//		return (assign_3vecf(obj->text.color_1.val[0] * final_inter, obj->text.color_1.val[1] * final_inter, obj->text.color_1.val[2] * final_inter));
	//	return(obj->text.color_2);
//		return (assign_3vecf(obj->text.color_2.val[0] * final_inter, obj->text.color_2.val[1] * final_inter, obj->text.color_2.val[2] * final_inter));
	//	return(obj->text.color_3);
//		return (assign_3vecf(obj->text.color_3.val[0] * final_inter, obj->text.color_3.val[1] * final_inter, obj->text.color_3.val[2] * final_inter));
//	return (assign_3vecf(obj->text.color_1.val[0] * final_inter, obj->text.color_1.val[1] * final_inter, obj->text.color_1.val[2] * final_inter));
	t_2vecf text_coord = obj->get_text_coordinate(inter_point, normal_inter, obj);
	return (assign_3vecf(obj->text.color_1.val[0] * final_inter, obj->text.color_1.val[1] * final_inter, obj->text.color_1.val[2] * final_inter));
				if (shadow_obj->refraction > 0)
					t_3vecf obj_color = shadow_obj->get_text_color(inter_point, normal_inter, shadow_obj);
					transp_fact.val[0] -= shadow_obj->refraction > 1 ? 0.1/* false */ : ((1 -shadow_obj->refraction) * (1 - obj_color.val[0])); // ->transmitance !!
					transp_fact.val[1] -= shadow_obj->refraction > 1 ? 0.1/* false */ : ((1 - shadow_obj->refraction) * (1 - obj_color.val[1])); // ->transmitance !!
					transp_fact.val[2] -= shadow_obj->refraction > 1 ? 0.1/* false */ : ((1 - shadow_obj->refraction) * (1 - obj_color.val[2])); // ->transmitance !!
		//	printf("%f %f %f\n", shadow_obj->color.val[0], shadow_obj->color.val[1], shadow_obj->color.val[2]);
	//return (closest_obj->color);
//	if (closest_obj->obj_type == OBJ_CONE)
//		return (closest_obj->color);
	normal_inter = closest_obj->get_normal_inter(inter_point, closest_obj);
	if (closest_obj->obj_type != OBJ_PLANE)
	obj_color = closest_obj->get_text_color(inter_point, normal_inter, closest_obj);
	if (closest_obj->refraction < 1 && closest_obj->reflection > 0) // reflection
		lighted_color.val[0] = closest_obj->color.val[0] * light_fact;
		lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
		lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
		lighted_color.val[0] = lighted_color.val[0] * (1 - closest_obj->reflection) + refl_color.val[0] * closest_obj->reflection;
		lighted_color.val[1] = lighted_color.val[1] * (1 - closest_obj->reflection) + refl_color.val[1] * closest_obj->reflection;
		lighted_color.val[2] = lighted_color.val[2] * (1 - closest_obj->reflection) + refl_color.val[2] * closest_obj->reflection;
		//lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
		//lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
	else if (closest_obj->refraction > 1) // reflection and refraction
		double fresnel_ratio = compute_fresnel_ratio(dir, normal_inter, closest_obj->refraction);
			t_3vecf	refr_ray = refract_ray(dir, normal_inter, closest_obj->refraction);
		lighted_color.val[0] = closest_obj->color.val[0] * light_fact;
		lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
		lighted_color.val[2] = closest_obj->color.val[2] * light_fact;*/
//		refr_color.val[0] = lighted_color.val[0] * (1 - closest_obj->reflection) + refr_color.val[0] * closest_obj->reflection; // !!!! ->reflection => ->transmitance
//		refr_color.val[1] = lighted_color.val[1] * (1 - closest_obj->reflection) + refr_color.val[1] * closest_obj->reflection;
//		refr_color.val[2] = lighted_color.val[2] * (1 - closest_obj->reflection) + refr_color.val[2] * closest_obj->reflection;
	else if (closest_obj->refraction <= 1) // transparency
		//double fresnel_ratio = compute_fresnel_ratio(dir, normal_inter, closest_obj->refraction);
		lighted_color.val[0] = closest_obj->color.val[0] * light_fact;
		lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
		lighted_color.val[2] = closest_obj->color.val[2] * light_fact;*/
			//t_3vecf	refr_ray = refract_ray(dir, normal_inter, closest_obj->refraction);
		lighted_color.val[0] = lighted_color.val[0] * (1 - closest_obj->refraction) + refr_color.val[0] * closest_obj->refraction;
		lighted_color.val[1] = lighted_color.val[1] * (1 - closest_obj->refraction) + refr_color.val[1] * closest_obj->refraction;
		lighted_color.val[2] = lighted_color.val[2] * (1 - closest_obj->refraction) + refr_color.val[2] * closest_obj->refraction;
		lighted_color.val[0] = closest_obj->color.val[0] * light_fact;
		lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
		lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
	//return (closest_obj->color);
//	if (closest_obj->obj_type == OBJ_CONE)
//		return (closest_obj->color);
	normal_inter = closest_obj->get_normal_inter(inter_point, closest_obj);
	lighted_color.val[0] = closest_obj->color.val[0] * light_fact;
	lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
	lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
	lighted_color.val[0] = lighted_color.val[0] * (1 - closest_obj->reflection) + refl_color.val[0] * closest_obj->reflection;
	lighted_color.val[1] = lighted_color.val[1] * (1 - closest_obj->reflection) + refl_color.val[1] * closest_obj->reflection;
	lighted_color.val[2] = lighted_color.val[2] * (1 - closest_obj->reflection) + refl_color.val[2] * closest_obj->reflection;
	//lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
	//lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
	//return (closest_obj->color);
	normal_inter = closest_obj->get_normal_inter(inter_point, closest_obj);
	lighted_color.val[0] = closest_obj->color.val[0] * light_fact;
	lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
	lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
	//return (closest_obj->color);
	normal_inter = closest_obj->get_normal_inter(inter_point, closest_obj);
	lighted_color.val[0] = closest_obj->color.val[0] * light_fact;
	lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
	lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
	//return (closest_obj->color);
//	if (closest_obj->obj_type == OBJ_CONE)
//		return (closest_obj->color);
	normal_inter = closest_obj->get_normal_inter(inter_point, closest_obj);
	lighted_color.val[0] = closest_obj->color.val[0] * light_fact;
	lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
	lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
	lighted_color.val[0] = lighted_color.val[0] * (1 - closest_obj->reflection) + refl_color.val[0] * closest_obj->reflection;
	lighted_color.val[1] = lighted_color.val[1] * (1 - closest_obj->reflection) + refl_color.val[1] * closest_obj->reflection;
	lighted_color.val[2] = lighted_color.val[2] * (1 - closest_obj->reflection) + refl_color.val[2] * closest_obj->reflection;
	//lighted_color.val[1] = closest_obj->color.val[1] * light_fact;
	//lighted_color.val[2] = closest_obj->color.val[2] * light_fact;
	text = (t_text_proc *)obj->text.text_param;
	text = (t_text_proc *)obj->text.text_param;
		return (assign_3vecf(obj->text.color_1.val[0] * perlin_f, obj->text.color_1.val[1] * perlin_f, obj->text.color_1.val[2] * perlin_f));
		return (assign_3vecf(obj->text.color_2.val[0] * perlin_f, obj->text.color_2.val[1] * perlin_f, obj->text.color_2.val[2] * perlin_f));
		return (assign_3vecf(obj->text.color_3.val[0] * perlin_f, obj->text.color_3.val[1] * perlin_f, obj->text.color_3.val[2] * perlin_f));
	text_coord = obj->get_text_coordinate(inter_point, normal_inter, obj);
	text = (t_text_proc *)obj->text.text_param;
//	color.val[0] = obj->text.color_1.val[0] * (1 - marble_f) + obj->text.color_2.val[0] * marble_f;
//	color.val[1] = obj->text.color_1.val[1] * (1 - marble_f) + obj->text.color_2.val[1] * marble_f;
//	color.val[2] = obj->text.color_1.val[2] * (1 - marble_f) + obj->text.color_2.val[2] * marble_f;
	text = (t_text_proc *)obj->text.text_param;
	text_coord = obj->get_text_coordinate(inter_point, normal_inter, obj);
//	text_coord = obj->get_text_coordinate(inter_point, normal_inter, obj);
//	color.val[0] = obj->text.color_1.val[0] * (1 - marble_f) + obj->text.color_2.val[0] * marble_f;
//	color.val[1] = obj->text.color_1.val[1] * (1 - marble_f) + obj->text.color_2.val[1] * marble_f;
//	color.val[2] = obj->text.color_1.val[2] * (1 - marble_f) + obj->text.color_2.val[2] * marble_f;
	text = (t_text_proc *)obj->text.text_param;
	text_coord = obj->get_text_coordinate(inter_point, normal_inter, obj);
		obj->get_text_color = &get_uni_color;
		obj->text.text_type = TEXT_UNI;
		obj->get_text_color = &get_grid_color;
		obj->text.text_type = TEXT_GRID;
		obj->get_text_color = &get_perlin_color;
		obj->text.text_type = TEXT_PERLIN;
		obj->get_text_color = &get_marble_color;
		obj->text.text_type = TEXT_MARBLE;
		obj->get_text_color = &get_wood_color;
		obj->text.text_type = TEXT_WOOD;
		obj->get_text_color = &get_wood_color;
		obj->text.text_type = TEXT_WOOD;
	if (obj->text.text_type == TEXT_IMAGE)
		if (!(obj->text.text_param = parse_image(line, &i)))
		if (!(obj->text.text_param = parse_procedural(line, &i)))
	obj->color = assign_3vecf(1, 1, 1);
